apply plugin: 'com.android.application'
//apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply plugin: "androidx.navigation.safeargs"


def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
try {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
catch(Exception e) {
}




ext.versionMajor = 1
ext.versionMinor = 1
ext.versionPatch = project.hasProperty('versionCode') ? project.property('versionCode') as int : 1

def versionCode() {
    if (!project.hasProperty('versionCode'))
        return 1
    def code = versionMajor * 1000000 + versionMinor * 1000 + versionPatch
    println "versionCode is set to $code"
    return code
}

def versionName() {
    if (!project.hasProperty('versionCode'))
        return "1.0"
    def name = "${versionMajor}.${versionMinor}.${versionPatch}"
    println "versionName is set to $name"
    return name
}


android {
    compileSdkVersion AndroidSdk.compile

    signingConfigs {

        debug {
            keyAlias 'debug'
            keyPassword 'android'
            storeFile file('../debug.jks')
            storePassword 'android'
        }

        config {
            storeFile file('/Users/joreilly/dev/keystore/galwaybus_android.jks')
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
            v2SigningEnabled true
        }
    }

    defaultConfig {
        applicationId "com.surrus.galwaybus"
        minSdkVersion AndroidSdk.min
        targetSdkVersion AndroidSdk.target

        versionCode this.versionCode()
        versionName this.versionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        final String googleMapsKey = System.getenv('GOOGLE_API_KEY') ?: 'test'
        resValue 'string', 'google_maps_key', googleMapsKey
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

        debug {
            signingConfig signingConfigs.debug
        }

        applicationVariants.all { variant ->
            if (variant.buildType.name.equals("debug")) {
                variant.mergedFlavor.resourceConfigurations.clear()
                variant.mergedFlavor.resourceConfigurations.add("en")
                variant.mergedFlavor.resourceConfigurations.add("xxhdpi")
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/common.kotlin_module'
        exclude 'META-INF/*.kotlin_module'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation Kotlin.stdLib
    implementation Kotlin.coroutinesCore
    implementation Kotlin.coroutinesAndroid

    implementation Koin.core
    implementation Koin.android
    implementation Koin.androidViewModel

    implementation "com.crashlytics.sdk.android:crashlytics:2.10.1"

    implementation Firebase.core
    implementation PlayServices.location
    implementation PlayServices.maps

    implementation 'com.karumi:dexter:4.2.0'
    implementation 'net.danlew:android.joda:2.10.6'
    implementation 'com.orhanobut:logger:1.15'

    implementation Okhttp.okhttp
    implementation Okhttp.loggingInterceptor

    implementation ArchComponents.navFragmentKtx
    implementation ArchComponents.navUiKtx
    implementation ArchComponents.work
    implementation ArchComponents.fragment

    implementation ArchComponents.lifecycleExtensions

    implementation "com.squareup.sqldelight:android-driver:${Versions.sqlDelight}"

    // Testing
    testImplementation Testing.junit
    testImplementation Testing.robolectric
    testImplementation Testing.mockWebServer
    testImplementation Mockito.core
    testImplementation Mockito.kotlin
    testImplementation Testing.coreTesting
    testImplementation Testing.couroutinesTest

    androidTestImplementation Testing.screengrab
    androidTestImplementation Mockito.android
    androidTestImplementation Mockito.kotlin
    androidTestImplementation Testing.fragmentTesting
    androidTestImplementation 'androidx.test:rules:1.2.0'

    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"


    implementation project(":SharedCode")
}

apply plugin: 'com.google.gms.google-services'

